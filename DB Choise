#MongoDB:
Документно-ориентированная NoSQL база данных, использует формат хранения данных BSON (Binary JSON). 
MongoDB хранит данные в виде документов, что упрощает работу с неструктурированными и полуструктурированными данными, что делает комфортной работу
с большими объемами данных.

##Плюсы:
1. Гибкость: MongoDB не требует жесткой структуры данных, что позволяет легко ее изменять.   
2. Масштабируемость: Поддерживает горизонтальное масштабирование, можно легко обрабатывать большее кол-во данных засчет новых серверов. 
3. Высокая производительность: Оптимизирована для быстрого чтения и записи данных, что делает её подходящей для приложений с высоким трафиком.
5. Хорошая поддержка JSON: Данные хранятся в формате, схожем с JSON, что упрощает интеграцию с современными веб-приложениями.
6. Мощные возможности поиска: Поддерживает сложные запросы и индексацию, что улучшает производительность поиска.

##Минусы:
1. Транзакции: Сильно хуже справляется с транзакциями, по сравнению с реляционными БД.
2. Целостность данных: Из-за гибкости структуры могут возникнуть проблемы с поддержанием целостности данных.
3. Сложность в управлении: Для более сложных приложений может потребоваться значительная настройка и управление кластером.
4. Неоптимальная работа с большими данными: При работе с очень большими объемами данных и сложными запросами может наблюдаться снижение производительности.

##Сложность операций*:
- Чтение(SELECT): O(log n)
- Запись(INSERT): O(n)  
- Изменение(UPDATE): O(log n)
- Удаление(DELETE): O(log n)

#PostgreSQL:
PostgreSQL —  объектно-реляционная СУБД с открытым исходным кодом. Славится надежностью, 
функционалом и расширяемостью. Поддерживает стандартный SQL и предлагает множество дополнительных возможностей, таких как работа с JSON, полнотекстовый поиск и расширенные механизмы индексации.

#Плюсы:
1. Мощные возможности SQL: Поддержка сложных запросов, оконных функций и подзапросов.
2. Расширяемость: Пользователи могут создавать собственные типы данных, функции и операторы.
3. Надежность: Высокая степень защиты данных с помощью механизмов транзакций (ACID).
4. Поддержка JSON: Возможность работы с неструктурированными данными.
5. Сообщество и документация: Активное сообщество и обширная документация.

##Минусы:
1. Производительность при больших объемах данных: Может уступать NoSQL решениям в определенных сценариях.
2. Зависимость от ресурсов: Требует больше ресурсов по сравнению с некоторыми легковесными СУБД.

##Сложность операций*:
- Чтение (SELECT): O(log n) 
- Запись (INSERT): O(n)
- Изменение(UPDATE): O(log n)
- Удаление(DELETE): O(log n)

#ClickHouse:
ClickHouse — это колоночная СУБД с открытым исходным кодом, разработанная для обработки больших объемов данных в реальном времени. Она оптимизирована для аналитических запросов и обеспечивает высокую скорость 
обработки данных благодаря своей архитектуре, использующей колоночное хранение и сжатие.

##Плюсы:
1. Высокая производительность: ClickHouse может обрабатывать миллиарды строк и выполнять сложные аналитические запросы за считанные секунды.
2. Колоночное хранение данных: Оптимизация для чтения больших объемов данных, что значительно ускоряет выполнение запросов.
3. Масштабируемость: Легко масштабируется как вертикально, так и горизонтально, поддерживая распределенные системы.
4. Поддержка SQL: Использует SQL-подобный язык запросов, что облегчает интеграцию с существующими системами.
5. Сжатие данных: Эффективные алгоритмы сжатия позволяют экономить место на диске.

##Минусы:
1. Не подходит для транзакций: ClickHouse не предназначен для транзакционных операций (OLTP), что ограничивает его применение в некоторых сценариях.
2. Сложность настройки: Может потребовать значительных усилий для настройки и оптимизации.
3. Ограниченная поддержка обновлений и удалений: В отличие от реляционных СУБД, операции изменения и удаления выполняются менее эффективно.
4. Отсутствие поддержки некоторых SQL-функций: Некоторые функции, доступные в традиционных реляционных базах данных, могут отсутствовать.

##Сложность операций*:
- Чтение (SELECT): O(log n) 
- Запись (INSERT): O(n)
- Изменение(UPDATE): O(n)
- Удаление(DELETE): O(n)